{
	"application": {
		"title": "FlightDelayMonitor",
		"roles": [
			"admin",
			"user"
		],
		"default_role": "user",
		"collections": [
			{
				"name": "policies",
				"type": "collection",
				"fields": [
					{
						"name": "policyId",
						"title": "PolicyId",
						"type": "integer"
					},
					{
						"name": "customer",
						"title": "Customer",
						"type": "string"
					},
					{
						"name": "premium",
						"title": "Premium",
						"type": "string"
					},
					{
						"name": "riskId",
						"title": "RiskId",
						"type": "string"
					},
					{
						"name": "weight",
						"title": "Weight",
						"type": "integer"
					},
					{
						"name": "calculatedPayout",
						"title": "CalculatedPayout",
						"type": "string"
					},
					{
						"name": "actualPayout",
						"title": "ActualPayout",
						"type": "string"
					},
					{
						"name": "state",
						"title": "State",
						"type": "integer"
					},
					{
						"name": "stateTime",
						"title": "StateTime",
						"type": "time"
					},
					{
						"name": "stateMessage",
						"title": "StateMessage",
						"type": "integer"
					},
					{
						"name": "proof",
						"title": "Proof",
						"type": "string"
					},
					{
						"name": "currency",
						"title": "Currency",
						"type": "string"
					},
					{
						"name": "customerExternalId",
						"title": "CustomerExternalId",
						"type": "string"
					}
				]
			},
			{
				"name": "risks",
				"type": "collection",
				"fields": [
					{
						"name": "carrierFlightNumber",
						"title": "CarrierFlightNumber",
						"type": "string"
					},
					{
						"name": "departureYearMonthDay",
						"title": "DepartureYMD",
						"type": "string"
					},
					{
						"name": "arrivalTime",
						"title": "ArrivalTime",
						"type": "date",
						"format": "DD.MM.YYYY hh:mm:ss"
					},
					{
						"name": "delayInMinutes",
						"title": "DelayInMinutes",
						"type": "integer"
					},
					{
						"name": "delay",
						"title": "Delay",
						"type": "integer"
					},
					{
						"name": "cumulatedWeightedPremium",
						"title": "CumWeightPremium",
						"type": "integer"
					},
					{
						"name": "premiumMultiplier",
						"title": "PremiumMultiplier",
						"type": "integer"
					},
					{
						"name": "riskId",
						"title": "RiskId",
						"type": "string",
						"display_helper": "addressShort"
					}
				]
			},
			{
				"name": "ledger",
				"type": "collection",
				"fields": [
					{
						"name": "account",
						"title": "Account",
						"type": "integer"
					},
					{
						"name": "description",
						"title": "Description",
						"type": "string"
					},
					{
						"name": "balance",
						"title": "Balance",
						"type": "string"
					}
				]
			},
			{
				"name": "contracts",
				"type": "collection",
				"fields": [
					{
						"name": "contractId",
						"title": "Contract ID",
						"type": "string"
					},
					{
						"name": "version",
						"title": "Version",
						"type": "string"
					},
					{
						"name": "network",
						"title": "Network",
						"type": "string",
						"input": "select",
						"input_items": [
							{
								"value": "mainnet",
								"title": "Mainnet"
							},
							{
								"value": "ropsten",
								"title": "Ropsten"
							},
							{
								"value": "kovan",
								"title": "Kovan"
							},
							{
								"value": "rinkeby",
								"title": "Rinkeby"
							}
						]
					},
					{
						"name": "address",
						"title": "Contract Address",
						"type": "string",
						"display_helper": "addressShort"
					},
					{
						"name": "abi",
						"title": "ABI",
						"type": "string"
					},
					{
						"name": "createTx",
						"title": "Creation Tx",
						"type": "string",
						"display_helper": "addressShort"
					},
					{
						"name": "createBlock",
						"title": "Creation Block",
						"type": "string"
					},
					{
						"name": "createTime",
						"title": "Creation Time",
						"type": "date"
					},
					{
						"name": "description",
						"title": "Description",
						"type": "string",
						"input": "textarea"
					},
					{
						"name": "commit",
						"title": "Github Commit",
						"type": "string"
					}
				]
			},
			{
				"name": "networks",
				"type": "collection",
				"fields": [
					{
						"name": "network_id",
						"title": "Network ID",
						"type": "string"
					},
					{
						"name": "network_name",
						"title": "Name",
						"type": "string"
					},
					{
						"name": "etherscan_url",
						"title": "Etherscan URL",
						"type": "string"
					},
					{
						"name": "addressresolver",
						"title": "Addressresolver",
						"type": "string"
					},
					{
						"name": "contract",
						"title": "Contract Address",
						"type": "string"
					}
				]
			},
			{
				"name": "logs",
				"type": "collection",
				"fields": [
					{
						"name": "signature",
						"title": "Signature",
						"type": "string"
					},
					{
						"name": "contractId",
						"title": "Contract",
						"type": "string"
					},
					{
						"name": "block",
						"title": "Block",
						"type": "string"
					},
					{
						"name": "blockTime",
						"title": "BlockTime",
						"type": "string"
					},
					{
						"name": "txHash",
						"title": "TxHash",
						"type": "string"
					},
					{
						"name": "args",
						"title": "Arguments",
						"type": "string"
					}
				]
			}
		],
		"queries": [
			{
				"name": "admin_users",
				"collection": "users",
				"filter": "{}",
				"options": "{}"
			},
			{
				"name": "admin_user",
				"collection": "users",
				"find_one": true,
				"filter": "{ \"_id\": \":userId\" }",
				"options": "{}"
			},
			{
				"name": "users_null",
				"collection": "users",
				"find_one": true,
				"filter": "{ \"_id\": null }",
				"options": "{}"
			},
			{
				"name": "current_user_data",
				"collection": "users",
				"find_one": true,
				"filter": "{ \"_id\": \"Meteor.userId()\" }",
				"options": "{}"
			},
			{
				"name": "policies_list",
				"collection": "policies",
				"filter": "{}",
				"options": "{}"
			},
			{
				"name": "risks_list",
				"collection": "risks",
				"filter": "{}",
				"options": "{}"
			},
			{
				"name": "ledger_list",
				"collection": "ledger",
				"filter": "{}",
				"options": "{}"
			},
			{
				"name": "contract_list",
				"collection": "contracts",
				"filter": "{}",
				"options": "{}"
			},
			{
				"name": "contracts_null",
				"collection": "contracts",
				"find_one": true,
				"filter": "{\"_id\":null}",
				"options": "{}"
			},
			{
				"name": "contract",
				"collection": "contracts",
				"find_one": true,
				"filter": "{\"_id\":\":contractId\"}",
				"options": "{}"
			},
			{
				"name": "network_list",
				"collection": "networks",
				"filter": "{}",
				"options": "{}"
			},
			{
				"name": "networks_null",
				"collection": "networks",
				"find_one": true,
				"filter": "{\"_id\":null}",
				"options": "{}"
			},
			{
				"name": "network",
				"collection": "networks",
				"find_one": true,
				"filter": "{\"_id\":\":networkId\"}",
				"options": "{}"
			},
			{
				"name": "logs_list",
				"collection": "logs",
				"filter": "{}",
				"options": "{}"
			}
		],
		"public_zone": {
			"type": "zone",
			"components": [
				{
					"name": "left_menu",
					"type": "menu",
					"items": [
						{
							"title": "Home",
							"route": "home_public"
						}
					],
					"object_type": "menu"
				},
				{
					"name": "right_menu",
					"type": "menu",
					"items": [
						{
							"title": "Register",
							"route": "register"
						},
						{
							"title": "Login",
							"route": "login"
						}
					],
					"object_type": "menu"
				}
			],
			"pages": [
				{
					"name": "home_public",
					"type": "page",
					"components": [
						{
							"name": "home_jumbotron",
							"type": "jumbotron",
							"title": "FlightDelayMonitor",
							"button_title": "Continue &raquo;",
							"button_route": "login",
							"object_type": "jumbotron"
						}
					]
				},
				{
					"name": "login",
					"type": "page",
					"template": "login"
				},
				{
					"name": "register",
					"type": "page",
					"template": "register"
				},
				{
					"name": "verify_email",
					"type": "page",
					"template": "verify_email",
					"route_params": [
						"verifyEmailToken"
					]
				},
				{
					"name": "forgot_password",
					"type": "page",
					"template": "forgot_password"
				},
				{
					"name": "reset_password",
					"type": "page",
					"template": "reset_password",
					"route_params": [
						"resetPasswordToken"
					]
				}
			]
		},
		"private_zone": {
			"type": "zone",
			"components": [
				{
					"name": "left_menu",
					"type": "menu",
					"items": [
						{
							"title": "Home",
							"route": "home_private",
							"icon_class": "fa fa-home"
						},
						{
							"title": "Policies",
							"route": "policies"
						},
						{
							"title": "Risks",
							"route": "risks"
						},
						{
							"title": "Ledger",
							"route": "ledger"
						},
						{
							"title": "Contracts",
							"route": "contracts"
						},
						{
							"title": "Networks",
							"route": "networks"
						},
						{
							"title": "Logs",
							"route": "logs"
						}
					],
					"object_type": "menu"
				},
				{
					"name": "right_menu",
					"type": "menu",
					"items": [
						{
							"title": "Admin",
							"route": "admin",
							"icon_class": "fa fa-wrench"
						},
						{
							"title": "{{userEmail}}",
							"icon_class": "fa fa-cog",
							"items": [
								{
									"title": "Settings",
									"route": "user_settings"
								},
								{
									"title": "Logout",
									"route": "logout"
								}
							]
						}
					],
					"object_type": "menu"
				}
			],
			"pages": [
				{
					"name": "home_private",
					"type": "page",
					"title": "Welcome {{userFullName}}!"
				},
				{
					"name": "admin",
					"type": "page",
					"components": [
						{
							"name": "side_menu",
							"type": "menu",
							"class": "nav nav-stacked nav-pills",
							"items": [
								{
									"title": "Users",
									"route": "admin.users"
								}
							],
							"object_type": "menu"
						}
					],
					"roles": [
						"admin"
					],
					"pages": [
						{
							"name": "users",
							"type": "page",
							"components": [
								{
									"name": "view",
									"type": "data_view",
									"title": "Users",
									"query_name": "admin_users",
									"text_if_empty": "No users yet",
									"insert_route": "admin.users.insert",
									"details_route": "admin.users.details",
									"edit_route": "admin.users.edit",
									"details_route_params": [
										{
											"name": "userId",
											"value": "this._id"
										}
									],
									"edit_route_params": [
										{
											"name": "userId",
											"value": "this._id"
										}
									],
									"fields": [
										{
											"name": "profile.name",
											"title": "Name",
											"type": "string"
										},
										{
											"name": "profile.email",
											"title": "E-mail",
											"type": "string"
										},
										{
											"name": "roles",
											"title": "Role",
											"type": "string"
										}
									],
									"object_type": "data_view"
								}
							],
							"pages": [
								{
									"name": "details",
									"type": "page",
									"components": [
										{
											"name": "details_form",
											"type": "form",
											"title": "User details",
											"query_name": "admin_user",
											"mode": "read_only",
											"close_route": "admin.users",
											"back_route": "admin.users",
											"fields": [
												{
													"name": "profile.name",
													"title": "Name",
													"type": "string"
												},
												{
													"name": "profile.email",
													"title": "E-mail",
													"type": "email"
												},
												{
													"name": "roles",
													"title": "Role",
													"type": "string"
												}
											],
											"object_type": "form"
										}
									],
									"route_params": [
										"userId"
									]
								},
								{
									"name": "insert",
									"type": "page",
									"components": [
										{
											"name": "insert_form",
											"type": "form",
											"title": "Add new user",
											"query_name": "users_null",
											"mode": "insert",
											"submit_route": "admin.users",
											"cancel_route": "admin.users",
											"fields": [
												{
													"name": "profile.name",
													"title": "Name",
													"type": "string",
													"required": true
												},
												{
													"name": "profile.email",
													"title": "E-mail",
													"type": "email",
													"required": true
												},
												{
													"name": "password",
													"title": "Password",
													"type": "string",
													"required": true,
													"input": "password"
												}
											],
											"object_type": "form"
										}
									]
								},
								{
									"name": "edit",
									"type": "page",
									"components": [
										{
											"name": "edit_form",
											"type": "form",
											"title": "Edit user",
											"query_name": "admin_user",
											"mode": "update",
											"submit_route": "admin.users",
											"cancel_route": "admin.users",
											"fields": [
												{
													"name": "profile.name",
													"title": "Name",
													"type": "string",
													"required": true
												},
												{
													"name": "profile.email",
													"title": "E-mail",
													"type": "email",
													"required": true
												},
												{
													"name": "roles",
													"title": "Role",
													"type": "array",
													"input": "radio",
													"input_items": [
														{
															"value": "user",
															"title": "User"
														},
														{
															"value": "admin",
															"title": "Admin"
														},
														{
															"value": "blocked",
															"title": "Blocked"
														}
													]
												}
											],
											"object_type": "form"
										}
									],
									"route_params": [
										"userId"
									]
								}
							]
						}
					]
				},
				{
					"name": "user_settings",
					"type": "page",
					"components": [
						{
							"name": "side_menu",
							"type": "menu",
							"class": "nav nav-stacked nav-pills",
							"items": [
								{
									"title": "Profile",
									"route": "user_settings.profile"
								},
								{
									"title": "Change password",
									"route": "user_settings.change_pass"
								}
							],
							"object_type": "menu"
						}
					],
					"roles": [
						"user",
						"admin"
					],
					"pages": [
						{
							"name": "profile",
							"type": "page",
							"components": [
								{
									"name": "edit_form",
									"type": "form",
									"title": "Edit your profile",
									"query_name": "current_user_data",
									"mode": "update",
									"submit_route": "user_settings.profile",
									"fields": [
										{
											"name": "profile.name",
											"title": "Name",
											"type": "string",
											"required": true
										},
										{
											"name": "profile.email",
											"title": "E-mail",
											"type": "email",
											"required": true
										},
										{
											"name": "profile.facebook",
											"title": "Facebook URL",
											"type": "string"
										},
										{
											"name": "profile.google",
											"title": "Google+ URL",
											"type": "string"
										},
										{
											"name": "profile.twitter",
											"title": "Twitter ID",
											"type": "string"
										},
										{
											"name": "profile.website",
											"title": "Website URL",
											"type": "string"
										}
									],
									"object_type": "form"
								}
							]
						},
						{
							"name": "change_pass",
							"type": "page",
							"template": "change_pass"
						}
					]
				},
				{
					"name": "logout",
					"type": "page",
					"template": "logout"
				},
				{
					"name": "policies",
					"type": "page",
					"title": "Policies",
					"components": [
						{
							"name": "policies_intro",
							"type": "div",
							"components": [
								{
									"name": "reload_policies",
									"type": "form",
									"mode": "update",
									"submit_code": "Meteor.call('reloadDatabase', (e,r) => { \n  if (e) {\n    console.log('Error reloading database: ' + e.message);\n  } else {\n    console.log('Database reloaded');\n  }\n});",
									"submit_button_title": "Reload Policies",
									"object_type": "form"
								}
							],
							"text": "List of all policies:",
							"object_type": "div"
						},
						{
							"name": "policies_list",
							"type": "data_view",
							"query_name": "policies_list",
							"fields": [
								{
									"name": "policyId",
									"title": "PolicyId",
									"type": "integer"
								},
								{
									"name": "customer",
									"title": "Customer",
									"type": "string",
									"display_helper": "addressShort"
								},
								{
									"name": "premium",
									"title": "Premium",
									"type": "string"
								},
								{
									"name": "riskId",
									"title": "RiskId",
									"type": "string",
									"display_helper": "addressShort",
									"join_collection": "risks",
									"join_container": "risk",
									"join_fields": [
										"\"carrierFlightNumber\""
									]
								},
								{
									"name": "weight",
									"title": "Weight",
									"type": "integer"
								},
								{
									"name": "calculatedPayout",
									"title": "CalculatedPayout",
									"type": "string"
								},
								{
									"name": "actualPayout",
									"title": "ActualPayout",
									"type": "string"
								},
								{
									"name": "state",
									"title": "State",
									"type": "integer"
								},
								{
									"name": "stateTime",
									"title": "StateTime",
									"type": "date",
									"format": "DD.MM.YYYY hh:mm:ss"
								},
								{
									"name": "stateMessage",
									"title": "StateMessage",
									"type": "string"
								},
								{
									"name": "currency",
									"title": "Currency",
									"type": "string"
								},
								{
									"name": "customerExternalId",
									"title": "CustomerExternalId",
									"type": "string"
								}
							],
							"object_type": "data_view"
						}
					]
				},
				{
					"name": "risks",
					"type": "page",
					"title": "Risks",
					"components": [
						{
							"name": "risks_intro",
							"type": "div",
							"text": "List of all risks:",
							"object_type": "div"
						},
						{
							"name": "risks_list",
							"type": "data_view",
							"query_name": "risks_list",
							"object_type": "data_view"
						}
					],
					"html": "<template name=\"TEMPLATE_NAME\">\n\t<div class=\"page-container\" id=\"content\">\n\t\t<div class=\"row\" id=\"title_row\">\n\t\t\t<div class=\"col-md-12\">\n\t\t\t\t<h2 id=\"page_title\" class=\"pull-left\">\n\t\t\t\t\t<a href=\"#\" id=\"page-back-button\" class=\"btn btn-default\" title=\"back\">\n\t\t\t\t\t\t<span class=\"fa fa-chevron-left\">\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span id=\"page-title-icon\" class=\"PAGE_TITLE_ICON_CLASS\">\n\t\t\t\t\t</span>\n\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tPAGE_TITLE\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t</h2>\n\t\t\t\t<div id=\"page_menu\" class=\"pull-right\">\n\t\t\t\t\t<a href=\"#\" id=\"page-close-button\" class=\"btn btn-default pull-right\" title=\"Close\">\n\t\t\t\t\t\t<span class=\"fa fa-times\">\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</a>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<p id=\"page_text\">\n\t\t\t\n\t\t\t\t\t\tPAGE_TEXT\n\t\t\t\t\t\n\t\t</p>\n\t</div>\n\t<div id=\"background-image\" style=\"background-image: url(BACKGROUND_IMAGE);\">\n\t</div>\n</template>\n\n",
					"js": "\n\nTemplate.TEMPLATE_NAME.events({\n\n});\n\nTemplate.TEMPLATE_NAME.helpers({\n\n});",
					"jsx": "/*IMPORTS*/\n\nexport class TEMPLATE_NAME extends Component {\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tcomponentWillMount() {\n\t\t/*TEMPLATE_CREATED_CODE*/\n\t}\n\n\tcomponentWillUnmount() {\n\t\t/*TEMPLATE_DESTROYED_CODE*/\n\t}\n\n\tcomponentDidMount() {\n\t\t/*TEMPLATE_RENDERED_CODE*/\n\n\t\tMeteor.defer(function() {\n\t\t\tglobalOnRendered();\n\t\t});\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className=\"page-container\" id=\"content\">\n\t\t\t\t\t<div className=\"row\" id=\"title_row\">\n\t\t\t\t\t\t<div className=\"col-md-12\">\n\t\t\t\t\t\t\t<h2 id=\"page_title\" className=\"pull-left\">\n\t\t\t\t\t\t\t\t<a href=\"#\" id=\"page-back-button\" className=\"btn btn-default\" title=\"back\">\n\t\t\t\t\t\t\t\t\t<span className=\"fa fa-chevron-left\">\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t<span id=\"page-title-icon\" className=\"PAGE_TITLE_ICON_CLASS\">\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\tPAGE_TITLE\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t<div id=\"page_menu\" className=\"pull-right\">\n\t\t\t\t\t\t\t\t<a href=\"#\" id=\"page-close-button\" className=\"btn btn-default pull-right\" title=\"Close\">\n\t\t\t\t\t\t\t\t\t<span className=\"fa fa-times\">\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<p id=\"page_text\">\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tPAGE_TEXT\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t\t<div id=\"background-image\" style=\"background-image: url(BACKGROUND_IMAGE);\">\n\t\t\t\t</div>\n\n\t\t\t</div>\n\t\t);\n\t}\n});\n\nexport const TEMPLATE_NAMEContainer = createContainer(function(props) {\n\t/*SUBSCRIPTIONS*/\n}, TEMPLATE_NAME);",
					"gasoline": {
						"type": "gasoline",
						"templates": [
							{
								"name": "TEMPLATE_NAME",
								"children": [
									{
										"children": [
											{
												"children": [
													{
														"children": [
															{
																"children": [
																	{
																		"children": [
																			{
																				"type": "html",
																				"element": "span",
																				"attributes": [
																					{
																						"name": "class",
																						"value": "fa fa-chevron-left"
																					}
																				],
																				"object_type": "gas_html"
																			}
																		],
																		"type": "html",
																		"element": "a",
																		"attributes": [
																			{
																				"name": "href",
																				"value": "#"
																			},
																			{
																				"name": "id",
																				"value": "page-back-button"
																			},
																			{
																				"name": "class",
																				"value": "btn btn-default"
																			},
																			{
																				"name": "title",
																				"value": "back"
																			}
																		],
																		"object_type": "gas_html"
																	},
																	{
																		"type": "html",
																		"element": "span",
																		"attributes": [
																			{
																				"name": "id",
																				"value": "page-title-icon"
																			},
																			{
																				"name": "class",
																				"value": "PAGE_TITLE_ICON_CLASS"
																			}
																		],
																		"object_type": "gas_html"
																	},
																	{
																		"type": "text",
																		"text": "\n\t\t\t\t\tPAGE_TITLE\n\t\t\t\t",
																		"object_type": "gas_text"
																	}
																],
																"type": "html",
																"element": "h2",
																"attributes": [
																	{
																		"name": "id",
																		"value": "page_title"
																	},
																	{
																		"name": "class",
																		"value": "pull-left"
																	}
																],
																"object_type": "gas_html"
															},
															{
																"children": [
																	{
																		"children": [
																			{
																				"type": "html",
																				"element": "span",
																				"attributes": [
																					{
																						"name": "class",
																						"value": "fa fa-times"
																					}
																				],
																				"object_type": "gas_html"
																			}
																		],
																		"type": "html",
																		"element": "a",
																		"attributes": [
																			{
																				"name": "href",
																				"value": "#"
																			},
																			{
																				"name": "id",
																				"value": "page-close-button"
																			},
																			{
																				"name": "class",
																				"value": "btn btn-default pull-right"
																			},
																			{
																				"name": "title",
																				"value": "Close"
																			}
																		],
																		"object_type": "gas_html"
																	}
																],
																"type": "html",
																"attributes": [
																	{
																		"name": "id",
																		"value": "page_menu"
																	},
																	{
																		"name": "class",
																		"value": "pull-right"
																	}
																],
																"object_type": "gas_html"
															}
														],
														"type": "html",
														"attributes": [
															{
																"name": "class",
																"value": "col-md-12"
															}
														],
														"object_type": "gas_html"
													}
												],
												"type": "html",
												"attributes": [
													{
														"name": "class",
														"value": "row"
													},
													{
														"name": "id",
														"value": "title_row"
													}
												],
												"object_type": "gas_html"
											},
											{
												"children": [
													{
														"type": "text",
														"text": "\n\t\t\tPAGE_TEXT\n\t\t",
														"object_type": "gas_text"
													}
												],
												"type": "html",
												"element": "p",
												"attributes": [
													{
														"name": "id",
														"value": "page_text"
													}
												],
												"object_type": "gas_html"
											}
										],
										"type": "html",
										"attributes": [
											{
												"name": "class",
												"value": "page-container"
											},
											{
												"name": "id",
												"value": "content"
											}
										],
										"object_type": "gas_html"
									},
									{
										"type": "html",
										"attributes": [
											{
												"name": "id",
												"value": "background-image"
											},
											{
												"name": "style",
												"value": "background-image: url(BACKGROUND_IMAGE);"
											}
										],
										"object_type": "gas_html"
									}
								],
								"type": "template"
							}
						]
					}
				},
				{
					"name": "ledger",
					"type": "page",
					"title": "Ledger",
					"components": [
						{
							"name": "ledger_intro",
							"type": "div",
							"text": "List of Ledger entries:",
							"object_type": "div"
						},
						{
							"name": "ledger_list",
							"type": "data_view",
							"query_name": "ledger_list",
							"object_type": "data_view"
						}
					]
				},
				{
					"name": "contracts",
					"type": "page",
					"components": [
						{
							"name": "contracts_intro",
							"type": "div",
							"components": [
								{
									"name": "reload_contracts",
									"type": "form",
									"mode": "update",
									"submit_code": "Meteor.call('reloadContracts', (e,r) => { \n  if (e) {\n    console.log('Error reloading contracts: ' + e.message);\n  } else {\n    console.log('Contracts reloaded');\n  }\n});",
									"submit_button_title": "Reload Contracts",
									"object_type": "form"
								}
							],
							"text": "List of all risks:",
							"object_type": "div"
						},
						{
							"name": "contracts_list",
							"type": "data_view",
							"title": "Contracts",
							"query_name": "contract_list",
							"insert_route": "contracts.insert",
							"details_route": "contracts.details",
							"edit_route": "contracts.update",
							"details_route_params": [
								{
									"name": "contractId",
									"value": "this._id"
								}
							],
							"edit_route_params": [
								{
									"name": "contractId",
									"value": "this._id"
								}
							],
							"object_type": "data_view"
						}
					],
					"pages": [
						{
							"name": "details",
							"type": "page",
							"components": [
								{
									"name": "form",
									"type": "form",
									"title": "Contract Details",
									"query_name": "contract",
									"mode": "read_only",
									"close_route": "contracts",
									"back_route": "contracts",
									"fields": [
										{
											"name": "contractId",
											"title": "contractId",
											"type": "string"
										},
										{
											"name": "version",
											"title": "Version",
											"type": "string"
										},
										{
											"name": "address",
											"title": "Contract Address",
											"type": "string",
											"display_helper": "etherscan"
										},
										{
											"name": "network",
											"title": "Network",
											"type": "string",
											"input": "select",
											"input_items": [
												{
													"value": "mainnet",
													"title": "Mainnet"
												},
												{
													"value": "ropsten",
													"title": "Ropsten"
												},
												{
													"value": "kovan",
													"title": "Kovan"
												},
												{
													"value": "rinkeby",
													"title": "Rinkeby"
												}
											]
										},
										{
											"name": "createTx",
											"title": "Creation Tx",
											"type": "string"
										},
										{
											"name": "createBlock",
											"title": "Creation Block",
											"type": "string"
										},
										{
											"name": "createTime",
											"title": "Creation Time",
											"type": "date"
										},
										{
											"name": "description",
											"title": "Description",
											"type": "string",
											"input": "textarea"
										},
										{
											"name": "abi",
											"title": "ABI",
											"type": "string"
										},
										{
											"name": "commit",
											"title": "Github Commit",
											"type": "string"
										}
									],
									"object_type": "form"
								}
							],
							"html": "<template name=\"TEMPLATE_NAME\">\n\t<div class=\"page-container\" id=\"content\">\n\t\t<div class=\"row\" id=\"title_row\">\n\t\t\t<div class=\"col-md-12\">\n\t\t\t\t<h2 id=\"page_title\" class=\"pull-left\">\n\t\t\t\t\t<a href=\"#\" id=\"page-back-button\" class=\"btn btn-default\" title=\"back\">\n\t\t\t\t\t\t<span class=\"fa fa-chevron-left\">\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span id=\"page-title-icon\" class=\"PAGE_TITLE_ICON_CLASS\">\n\t\t\t\t\t</span>\n\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tPAGE_TITLE\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t</h2>\n\t\t\t\t<div id=\"page_menu\" class=\"pull-right\">\n\t\t\t\t\t<a href=\"#\" id=\"page-close-button\" class=\"btn btn-default pull-right\" title=\"Close\">\n\t\t\t\t\t\t<span class=\"fa fa-times\">\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</a>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<p id=\"page_text\">\n\t\t\t\n\t\t\t\t\t\tPAGE_TEXT\n\t\t\t\t\t\n\t\t</p>\n\t</div>\n\t<div id=\"background-image\" style=\"background-image: url(BACKGROUND_IMAGE);\">\n\t</div>\n</template>\n\n",
							"js": "\n\nTemplate.TEMPLATE_NAME.events({\n\n});\n\nTemplate.TEMPLATE_NAME.helpers({\n\n});",
							"jsx": "/*IMPORTS*/\n\nexport class TEMPLATE_NAME extends Component {\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tcomponentWillMount() {\n\t\t/*TEMPLATE_CREATED_CODE*/\n\t}\n\n\tcomponentWillUnmount() {\n\t\t/*TEMPLATE_DESTROYED_CODE*/\n\t}\n\n\tcomponentDidMount() {\n\t\t/*TEMPLATE_RENDERED_CODE*/\n\n\t\tMeteor.defer(function() {\n\t\t\tglobalOnRendered();\n\t\t});\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className=\"page-container\" id=\"content\">\n\t\t\t\t\t<div className=\"row\" id=\"title_row\">\n\t\t\t\t\t\t<div className=\"col-md-12\">\n\t\t\t\t\t\t\t<h2 id=\"page_title\" className=\"pull-left\">\n\t\t\t\t\t\t\t\t<a href=\"#\" id=\"page-back-button\" className=\"btn btn-default\" title=\"back\">\n\t\t\t\t\t\t\t\t\t<span className=\"fa fa-chevron-left\">\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t<span id=\"page-title-icon\" className=\"PAGE_TITLE_ICON_CLASS\">\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\tPAGE_TITLE\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t<div id=\"page_menu\" className=\"pull-right\">\n\t\t\t\t\t\t\t\t<a href=\"#\" id=\"page-close-button\" className=\"btn btn-default pull-right\" title=\"Close\">\n\t\t\t\t\t\t\t\t\t<span className=\"fa fa-times\">\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<p id=\"page_text\">\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tPAGE_TEXT\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t\t<div id=\"background-image\" style=\"background-image: url(BACKGROUND_IMAGE);\">\n\t\t\t\t</div>\n\n\t\t\t</div>\n\t\t);\n\t}\n});\n\nexport const TEMPLATE_NAMEContainer = createContainer(function(props) {\n\t/*SUBSCRIPTIONS*/\n}, TEMPLATE_NAME);",
							"gasoline": {
								"type": "gasoline",
								"templates": [
									{
										"name": "TEMPLATE_NAME",
										"children": [
											{
												"children": [
													{
														"children": [
															{
																"children": [
																	{
																		"children": [
																			{
																				"children": [
																					{
																						"type": "html",
																						"element": "span",
																						"attributes": [
																							{
																								"name": "class",
																								"value": "fa fa-chevron-left"
																							}
																						],
																						"object_type": "gas_html"
																					}
																				],
																				"type": "html",
																				"element": "a",
																				"attributes": [
																					{
																						"name": "href",
																						"value": "#"
																					},
																					{
																						"name": "id",
																						"value": "page-back-button"
																					},
																					{
																						"name": "class",
																						"value": "btn btn-default"
																					},
																					{
																						"name": "title",
																						"value": "back"
																					}
																				],
																				"object_type": "gas_html"
																			},
																			{
																				"type": "html",
																				"element": "span",
																				"attributes": [
																					{
																						"name": "id",
																						"value": "page-title-icon"
																					},
																					{
																						"name": "class",
																						"value": "PAGE_TITLE_ICON_CLASS"
																					}
																				],
																				"object_type": "gas_html"
																			},
																			{
																				"type": "text",
																				"text": "\n\t\t\t\t\tPAGE_TITLE\n\t\t\t\t",
																				"object_type": "gas_text"
																			}
																		],
																		"type": "html",
																		"element": "h2",
																		"attributes": [
																			{
																				"name": "id",
																				"value": "page_title"
																			},
																			{
																				"name": "class",
																				"value": "pull-left"
																			}
																		],
																		"object_type": "gas_html"
																	},
																	{
																		"children": [
																			{
																				"children": [
																					{
																						"type": "html",
																						"element": "span",
																						"attributes": [
																							{
																								"name": "class",
																								"value": "fa fa-times"
																							}
																						],
																						"object_type": "gas_html"
																					}
																				],
																				"type": "html",
																				"element": "a",
																				"attributes": [
																					{
																						"name": "href",
																						"value": "#"
																					},
																					{
																						"name": "id",
																						"value": "page-close-button"
																					},
																					{
																						"name": "class",
																						"value": "btn btn-default pull-right"
																					},
																					{
																						"name": "title",
																						"value": "Close"
																					}
																				],
																				"object_type": "gas_html"
																			}
																		],
																		"type": "html",
																		"attributes": [
																			{
																				"name": "id",
																				"value": "page_menu"
																			},
																			{
																				"name": "class",
																				"value": "pull-right"
																			}
																		],
																		"object_type": "gas_html"
																	}
																],
																"type": "html",
																"attributes": [
																	{
																		"name": "class",
																		"value": "col-md-12"
																	}
																],
																"object_type": "gas_html"
															}
														],
														"type": "html",
														"attributes": [
															{
																"name": "class",
																"value": "row"
															},
															{
																"name": "id",
																"value": "title_row"
															}
														],
														"object_type": "gas_html"
													},
													{
														"children": [
															{
																"type": "text",
																"text": "\n\t\t\tPAGE_TEXT\n\t\t",
																"object_type": "gas_text"
															}
														],
														"type": "html",
														"element": "p",
														"attributes": [
															{
																"name": "id",
																"value": "page_text"
															}
														],
														"object_type": "gas_html"
													}
												],
												"type": "html",
												"attributes": [
													{
														"name": "class",
														"value": "page-container"
													},
													{
														"name": "id",
														"value": "content"
													}
												],
												"object_type": "gas_html"
											},
											{
												"type": "html",
												"attributes": [
													{
														"name": "id",
														"value": "background-image"
													},
													{
														"name": "style",
														"value": "background-image: url(BACKGROUND_IMAGE);"
													}
												],
												"object_type": "gas_html"
											}
										],
										"type": "template"
									}
								]
							},
							"route_params": [
								"contractId"
							]
						},
						{
							"name": "insert",
							"type": "page",
							"components": [
								{
									"name": "form",
									"type": "form",
									"title": "New Contract",
									"query_name": "contracts_null",
									"mode": "insert",
									"submit_route": "contracts",
									"cancel_route": "contracts",
									"fields": [
										{
											"name": "contractId",
											"title": "Contract ID",
											"type": "string"
										},
										{
											"name": "version",
											"title": "Version",
											"type": "string"
										},
										{
											"name": "network",
											"title": "Network",
											"type": "string",
											"input": "select",
											"input_items": [
												{
													"value": "mainnet",
													"title": "Mainnet"
												},
												{
													"value": "ropsten",
													"title": "Ropsten"
												},
												{
													"value": "kovan",
													"title": "Kovan"
												},
												{
													"value": "rinkeby",
													"title": "Rinkeby"
												}
											]
										},
										{
											"name": "address",
											"title": "Contract Address",
											"type": "string"
										},
										{
											"name": "abi",
											"title": "ABI",
											"type": "string"
										},
										{
											"name": "createTx",
											"title": "Creation Tx",
											"type": "string",
											"display_helper": "addressShort"
										},
										{
											"name": "createBlock",
											"title": "Creation Block",
											"type": "string"
										},
										{
											"name": "createTime",
											"title": "Creation Time",
											"type": "date"
										},
										{
											"name": "description",
											"title": "Description",
											"type": "string",
											"input": "textarea"
										},
										{
											"name": "commit",
											"title": "Github Commit",
											"type": "string"
										}
									],
									"object_type": "form"
								}
							]
						},
						{
							"name": "update",
							"type": "page",
							"components": [
								{
									"name": "form",
									"type": "form",
									"title": "Edit Contract",
									"query_name": "contract",
									"mode": "update",
									"submit_route": "contracts",
									"cancel_route": "contracts",
									"fields": [
										{
											"name": "contractId",
											"title": "Contract ID",
											"type": "string"
										},
										{
											"name": "version",
											"title": "Version",
											"type": "string"
										},
										{
											"name": "network",
											"title": "Network",
											"type": "string",
											"input": "select",
											"input_items": [
												{
													"value": "mainnet",
													"title": "Mainnet"
												},
												{
													"value": "ropsten",
													"title": "Ropsten"
												},
												{
													"value": "kovan",
													"title": "Kovan"
												},
												{
													"value": "rinkeby",
													"title": "Rinkeby"
												}
											]
										},
										{
											"name": "address",
											"title": "Contract Address",
											"type": "string"
										},
										{
											"name": "abi",
											"title": "ABI",
											"type": "string"
										},
										{
											"name": "createTx",
											"title": "Creation Tx",
											"type": "string",
											"display_helper": "addressShort"
										},
										{
											"name": "createBlock",
											"title": "Creation Block",
											"type": "string"
										},
										{
											"name": "createTime",
											"title": "Creation Time",
											"type": "date"
										},
										{
											"name": "description",
											"title": "Description",
											"type": "string",
											"input": "textarea"
										},
										{
											"name": "commit",
											"title": "Github Commit",
											"type": "string"
										}
									],
									"object_type": "form"
								}
							],
							"route_params": [
								"contractId"
							]
						}
					]
				},
				{
					"name": "logs",
					"type": "page",
					"components": [
						{
							"name": "logs_intro",
							"type": "div",
							"components": [
								{
									"name": "reload_logs",
									"type": "form",
									"mode": "update",
									"submit_code": "Meteor.call('reloadLogs', (e,r) => { \n  if (e) {\n    console.log('Error reloading logs: ' + e.message);\n  } else {\n    console.log('Logs reloaded');\n  }\n});",
									"submit_button_title": "Reload Logs",
									"object_type": "form"
								}
							],
							"text": "List of all Logs:",
							"object_type": "div"
						},
						{
							"name": "logs_list",
							"type": "data_view",
							"query_name": "logs_list",
							"object_type": "data_view"
						}
					]
				},
				{
					"name": "networks",
					"type": "page",
					"components": [
						{
							"name": "networks_intro",
							"type": "div",
							"object_type": "div"
						},
						{
							"name": "view",
							"type": "data_view",
							"title": "Networks",
							"query_name": "network_list",
							"insert_route": "networks.insert",
							"details_route": "networks.details",
							"edit_route": "networks.update",
							"details_route_params": [
								{
									"name": "networkId",
									"value": "this._id"
								}
							],
							"edit_route_params": [
								{
									"name": "networkId",
									"value": "this._id"
								}
							],
							"object_type": "data_view"
						}
					],
					"pages": [
						{
							"name": "details",
							"type": "page",
							"components": [
								{
									"name": "form",
									"type": "form",
									"title": "Network Details",
									"query_name": "network",
									"mode": "read_only",
									"close_route": "networks",
									"back_route": "networks",
									"object_type": "form"
								}
							],
							"route_params": [
								"networkId"
							]
						},
						{
							"name": "insert",
							"type": "page",
							"components": [
								{
									"name": "form",
									"type": "form",
									"title": "New Network",
									"query_name": "networks_null",
									"mode": "insert",
									"submit_route": "networks",
									"cancel_route": "networks",
									"object_type": "form"
								}
							]
						},
						{
							"name": "update",
							"type": "page",
							"components": [
								{
									"name": "form",
									"type": "form",
									"title": "Edit Network",
									"query_name": "network",
									"mode": "update",
									"submit_route": "networks",
									"cancel_route": "networks",
									"object_type": "form"
								}
							],
							"route_params": [
								"networkId"
							]
						}
					]
				}
			]
		},
		"client_startup_code": "Template.registerHelper(\"addressShort\",  function (address) {\n  return new Handlebars.SafeString('<a href=\"https://etherscan.io/address/' + address + '\" target=\"blank\">' + address.slice(0,7) + '...</a>');\n} );\n\n\nTemplate.registerHelper(\"etherscan\",  function (address) {\n  return new Handlebars.SafeString('<a href = \"https://etherscan.io/address/' + address + '\" target=\"blank\">' + address + '</a>');\n} );\n\n\n                        ",
		"copy_files": [
			{
				"source": "../flightDelay/build/contracts/FlightDelayNewPolicy.json",
				"dest": "PRIVATE_DIR/artifacts/FlightDelayNewPolicy.json"
			},
			{
				"source": "../flightDelay/build/contracts/FlightDelayLedger.json",
				"dest": "PRIVATE_DIR/artifacts/FlightDelayLedger.json"
			},
			{
				"source": "../flightDelay/build/contracts/FlightDelayUnderwrite.json",
				"dest": "PRIVATE_DIR/artifacts/FlightDelayUnderwrite.json"
			},
			{
				"source": "../flightDelay/build/contracts/FlightDelayAccessController.json",
				"dest": "PRIVATE_DIR/artifacts/FlightDelayAccessController.json"
			},
			{
				"source": "../flightDelay/build/contracts/FlightDelayController.json",
				"dest": "PRIVATE_DIR/artifacts/FlightDelayController.json"
			},
			{
				"source": "../flightDelay/build/contracts/FlightDelayDatabase.json",
				"dest": "PRIVATE_DIR/artifacts/FlightDelayDatabase.json"
			},
			{
				"source": "../flightDelay/build/contracts/FlightDelayPayout.json",
				"dest": "PRIVATE_DIR/artifacts/FlightDelayPayout.json"
			},
			{
				"source": "../flightDelay/build/contracts/FlightDelayAddressResolver.json",
				"dest": "PRIVATE_DIR/artifacts/FlightDelayAddressResolver.json"
			},
			{
				"source_content": "var winston = require('winston');\nvar fs = require('fs');\n\nnetwork = 'mainnet';\nversion = '1.0';\ncontractsInitialized = false;\n\nvar Web3 = require('web3');\n\nweb3 = new Web3(new Web3.providers.HttpProvider(\"http://35.158.95.25:8545\"));\n//web3.eth.getBlockNumber((err, result) => { console.log(result); });\n\n\n\n\nString.prototype.padLeft = function (length) {\n        var pad = ' '.repeat(length);\n        return String(pad + this).slice(-length);\n};\n\nString.prototype.padRight = function(l,c) {\n  return this+Array(Math.max(0, l-this.length+1)).join(c||\" \");};\n\nServerLogger = new (winston.Logger)({\n  transports: [\n    new (winston.transports.File)({\n      filename: 'Server.log',\n      json: false,\n      timestamp: function() {\n        return new Date().toISOString();\n      },\n      formatter: function(options) {\n        // Options object will be passed to the format function. \n        // It's general properties are: \n        //\t\ttimestamp, \n        //\t\tlevel, \n        //\t\tmessage, \n        //\t\tmeta. \n        // Depending on the transport type may be additional properties.\n        // Return string will be passed to logger.\n        var levelString = options.level.toUpperCase().padRight(10);\n        return options.timestamp() + \n          ' ' + \n          levelString +\n          (options.message ? options.message : '') +\n          (options.meta && Object.keys(options.meta).length ? JSON.stringify(options.meta) : '' );\n      }})\n   ]\n});\n\n\n",
				"dest": "SERVER_DIR/01_utilities.js"
			},
			{
				"source_content": "\n\nartifacts = jsonfile => JSON.parse(Assets.getText(jsonfile));\n\ngetContract = (contractId, contractName, version, network) => {\n  \n  \tvar contractItem = Contracts.findOne({\n  \t\t\tcontractId: contractId, \n  \t\t\tversion: version,\n  \t\t\tnetwork: network\n\t\t});\n  \tif (typeof contractItem === 'undefined') return undefined;\n\treturn web3.eth.contract(artifacts('artifacts/' + contractName + '.json').abi).at(contractItem.address);\n\n};\n\nupsertContract = (contractId, version, network) => {\n  \n    contract = Meteor.wrapAsync(FlightDelayController.contracts)(contractId);\n \n  \tContracts.update(\n      {contractId: contractId, version: version, network: network},\n      {$set: {address: contract[0], contractId: contractId, version: version, network: network}},\n      {upsert: true}\n    );\n  \n}\n\n\nreloadContracts = () => {\n\n  FlightDelayController = getContract('FD.Controller', 'FlightDelayController', version, network);\n\n  if (typeof FlightDelayController != 'undefined') {\n\n      upsertContract('FD.NewPolicy', version, network);\n      upsertContract('FD.Underwrite', version, network);\n      upsertContract('FD.Payout', version, network);\n      upsertContract('FD.AccessController', version, network);\n      upsertContract('FD.Ledger', version, network);\n      upsertContract('FD.Database', version, network);\n      upsertContract('FD.CustomersAdmin', version, network);\n      upsertContract('FD.Emergency', version, network);\n      upsertContract('FD.Owner', version, network);\n      upsertContract('FD.Funder', version, network);\n\n      contractsInitialized = true;\n      console.log('Contracts reloaded');\n\n  }\n}\n\n",
				"dest": "SERVER_DIR/02_reloadContracts.js"
			},
			{
				"source_content": "reloadDatabase = () => {\n\n  if (!contractsInitialized) return;\n  \n  \n  FlightDelayDatabase = getContract('FD.Database', 'FlightDelayDatabase', version, network);\n  FlightDelayLedger = getContract('FD.Ledger', 'FlightDelayLedger', version, network);\n  LedgerAddress = FlightDelayLedger.address;\n  LedgerBalance = FlightDelayLedger.balance;\n\n  console.log('LedgerAddress: ', LedgerAddress);\n\n  FD = {};\n  FD.Ledger = Meteor.wrapAsync(FlightDelayDatabase.ledger);\n  FD.Policies = Meteor.wrapAsync(FlightDelayDatabase.policies);\n  FD.Risks = Meteor.wrapAsync(FlightDelayDatabase.risks);\n\n  Ledger.remove({});\n  Ledger.insert({\n      account: 0,\n      balance: Number(web3.fromWei(FD.Ledger(0))).toFixed(4),\n      description: 'Premiums'\n  });\n\n  Ledger.insert({\n      account: 1,\n      balance: Number(web3.fromWei(FD.Ledger(1))).toFixed(4),\n      description: 'Risk Fund'\n  });\n\n  Ledger.insert({\n      account: 2,\n      balance: Number(web3.fromWei(FD.Ledger(2))).toFixed(4),\n      description: 'Payouts'\n  });\n\n  Ledger.insert({\n      account: 3,\n      description: 'Balance',\n      balance: Number(web3.fromWei(FD.Ledger(3))).toFixed(4)\n  });\n\n  Ledger.insert({\n      account: 4,\n      description: 'Reward',\n      balance: Number(web3.fromWei(FD.Ledger(4))).toFixed(4)\n  });\n\n  Ledger.insert({\n      account: 5,\n      description: 'OraclizeCosts',\n      balance: Number(web3.fromWei(FD.Ledger(5))).toFixed(4)\n  });\n\n  Ledger.insert({\n      account: 6,\n      description: 'Contract Balance',\n      balance: Number(web3.fromWei(LedgerBalance)).toFixed(4)\n  });\n\n\n  //var policyCount = FD.getPolicyCount();\n\n  var statusToString = function (status) {\n          var sts = {\n                  0 : \"Applied\",\n                  1 : \"Accepted\",\n                  2 : \"Revoked\",\n                  3 : \"Paid Out\",\n                  4 : \"Expired\",\n                  5 : \"Declined\"\n          };\n          return sts[status];\n  };\n\n  var currencyToString = function (currency) {\n          var cur = {\n                  0 : \"ETH\",\n                  1 : \"EUR\",\n                  2 : \"USD\",\n                  3 : \"GBP\"\n          };\n          return cur[currency];\n  };\n\n  var policyFormatterLong = function (policyId, policy, risk) {\n      if (!Policies.findOne({id:policyId})) {\n          Policies.insert({ \n                  policyId: policyId,\n                  customer: policy[0], \n                  state: statusToString(policy[6].toNumber()), \n                  premium: web3.fromWei(policy[1]).toFixed(2),\n                  riskId: policy[2],\n                  weight: policy[3].toFixed(0),\n                  calculatedPayout: web3.fromWei(policy[4]).toFixed(2), \n                  actualPayout: web3.fromWei(policy[5]).toFixed(2),\n                  stateTime: new Date(policy[7].toNumber() * 1000).toLocaleString('de'),\n                  stateMessage: Buffer.from(policy[8].slice(2), 'hex').toString().replace(/\\0/g, ''),\n                  currency: currencyToString(policy[10]),\n                  customerExternalId: Buffer.from(policy[11].slice(2), 'hex').toString().replace(/\\0/g, '')\n          });\n      }\n\n      if (!Risks.findOne({riskId: policy[2]})) {\n          Risks.insert({\n            riskId: policy[2],\n            carrierFlightNumber: Buffer(risk[0].slice(2),'hex').toString().replace(/\\0/g, ''),\n            departureYearMonthDay: Buffer(risk[1].slice(2), 'hex').toString().replace(/\\0/g, ''),\n            arrivalTime: new Date(risk[2].toNumber() * 1000).toLocaleString('de'), \n            delayInMinutes: risk[3].toNumber(),\n            delay: risk[4].toNumber(),\n            cumulatedWeightedPremium: web3.fromWei(risk[5]).toFixed(2),\n            premiumMultiplier: risk[6].toFixed(2)\n          });\n      }\n\n  };\n\n  Policies.remove({});\n  Risks.remove({});\n\n  var id = 0; \n  while (true) {\n      try {\n          if (!Policies.findOne({policyId: id})) {\n            console.log(id);\n            var policy = FD.Policies(id);\n            var risk = FD.Risks(policy[2]);\n            policyFormatterLong(id, policy, risk);\n          }\n      } catch (e) {\n          console.log(e);\n          break;\n      }\n      id++;\n  }\n\n  console.log('Database reloaded');\n\n}\n",
				"dest": "SERVER_DIR/03_reloadDatabase.js"
			},
			{
				"source_content": "\n\nreloadLogs = () => {\n  \n  if (!contractsInitialized) return;\n  \n  FlightDelayUnderwrite = getContract('FD.Underwrite', 'FlightDelayUnderwrite', version, network);\n  \n  var LogOraclizeCall = FlightDelayUnderwrite.LogOraclizeCall({}, {fromBlock: 4200000, toBlock: 'latest'});\n  \n  LogOraclizeCall.get((err, logs) => {\n    \n    for (var index in logs) {\n\n      \n      console.log(logs[index]);\n      \n      \n      \n      \n    }\n    \n    \n    \n  });\n  \n  LogOraclizeCall.stopWatching();\n  \n}\n\n",
				"dest": "SERVER_DIR/04_reloadLogs.js"
			},
			{
				"source_content": "Meteor.methods({\n  \n  reloadDatabase: () => { reloadDatabase(); },\n  reloadContracts: () => { reloadContracts(); },\n  reloadLogs: () => { reloadLogs(); },\n\n});\n",
				"dest": "SERVER_DIR/20_meteorMethods.js"
			},
			{
				"source_content": "\nreloadContracts();\nreloadDatabase();\nreloadLogs();\n\nconsole.log('Server started, initialized: ' + contractsInitialized.toString());\n\n",
				"dest": "SERVER_DIR/90_server_startup.js"
			}
		],
		"packages": {
			"npm": [
				"web3",
				"winston"
			]
		}
	}
}